@startuml Diagramm
struct temperaturePausesStruct{
    byte setpointTemperature[6];
    int16_t time[6];
}

struct parametrs{
    parametrs(const bool& timeSet, const bool& timeDelay, const byte& powerMax, const byte& powerMin);
    parametrs(){}
    bool _timeSet = false;
    bool _timeDelay = false;
    byte _powerMax = 255, _powerMin = 0;

}

class LCD{
    LiquidCrystal_I2C lcd{0x27, 20, 4};
    LCD();
    void ClearAll();
    void WriteOnLcdPause(const Pair<byte, uint16_t> &pause, const byte &numberPause);
    void WriteTemperature(const float &temperature);
    void Clear(const byte &curs);
    const void ClearLcd() { lcd.clear(); }
    void settingsMainMenu(const byte &parametr);
    void WiFi(const bool &parametr);
    void PowerLimits(const bool &parametr, const byte &minLimit, const byte &maxLimit);
    void TimeSettings(const bool &parametr);
    void TimeConcrete(const bool &parametr, const bool &value);
    void NumberProg(byte numberProgramm);
    void EnterTemperaturePause(byte numberProgramm, byte step, const bool &parametr, const byte &temperature, const uint16_t &time);
    void BaseSettings(const bool& parametr);
    void stopProgramm();
    void startProgramm();
    void mainMenu(const float& temperature, const byte& number);
}

class TRM{
    TRM(const byte& dwnBtn, const byte& upBtn, const byte& setBtn, const byte& strtBtn,
        const byte& nmbBtn, const byte& mtrBtn, const byte& mtrPin , const byte& sckPin, const byte& csPin, const byte& soPin);
    
    void main_programm();
    byte getPIDvalue();
    
    byte _upButton, _downButton, _numberButton, _motorPin, numberPause = 0;
    byte powerMax, powerMin;//переменные, связанные с макс и мин мощностями, должны загружаться из EEprom
    ProgrammRunner runner;
    TemperaturePauseCollector collector;
    //MyButton downButton;
    //MyButton upButton;
    MyButton settingsButton, startStopButton, motorButton;
    //MyButton numberButton;
    MyThermoCouple termoCouple;

    bool timeSet = false; //переменная связанная со временем, она должна загружаться из EEprom (false == min)
    bool timeDelay = false;//переменная связанная с отложенным временем
    bool wifiOn = false, _motorState = false;

    LCD lcd;
    PIDRegulator regulator;
    
    float getTemperature();
    
    byte getNumberPause() const;
    void enterTemperaturePauses();
    void settings();
    void motorOn();
    void startProgramm();
    void runningProgramm();
    void printMainMenu(const float& temperatureNew);
    void WiFiConnect(); //Подключение к wifi
    void saveParametrs();
    void loadParametrs();
    void baseParametrs();
    void chooseNumberPause();
}

class TemperatureProgramm{
    temperaturePausesStruct _pausesStruct
    TemperatureProgramm(const temperaturePausesStruct& pauses)//создание объекта, хранящего только структуру
    TemperatureProgramm(const int& adress)//создание обекта с ячейкой (чтобы он прочитал прог-му из ячейки)
    Pair<byte, uint16_t> readPause(const byte& pause)//получить паузу из программы
    void writePauses(char temp[6], uint16_t times[6])//записать программу, передав ей массивы(отказ-ся)
    void writePauses(const temperaturePausesStruct& structWrite)//запись программы ч-з стр-ру
    void writePauses(const byte& adress, const temperaturePausesStruct& structWrite);//запись с дальнейшим сохранением
    temperaturePausesStruct getPauseAll()//получить программу
    void savePauses(const int& adress)//сохранить программу в ячейку
}

class TemperaturePauseCollector{
    byte _numberProgramms[3] = {0, 1, 2}//номера температурных программ
    int _adress[3]//ячейки в которые будут записываться паузы
    TemperaturePauseCollector()
    void writePauses(const byte& numberProgramm, const temperaturePausesStruct& pause) //запись программы под номером и передача стр-ры в программу
    Pair<byte, uint16_t> readPause(const byte& numberProgramm, const byte& numberPause)//получить одну паузу и программы
    temperaturePausesStruct getPause(const byte& numberProgramm)//получить программу полностью
}


struct Koefficients{
    unsigned int P = 0
    unsigned int I = 0
    unsigned int D = 0
}

class PIDRegulator{
    Koefficients koefficients;  //стуктура с коэффициентами
    GyverPID regulator;
    byte _setpointTemperature = 0;  //для указания температуры уставки
    PIDRegulator()  //чтение из EEprom ПИД коэфф-ов и инициализация ПИД регулятора Gyver
    void const setLimits(const byte& minValue, const byte& maxValue) //установка лимитов
    void const putTemperature(const byte& temperature)  //Ввод температуры уставки
    int getValuePID(const float& temperatureIsTermoCouple)  //получение результата после передачи температуры
}



class GyverPID{
    datatype setpoint = 0;     // заданная величина, которую должен поддерживать регулятор
    datatype input = 0;        // сигнал с датчика (например температура, которую мы регулируем)
    datatype output = 0;       // выход с регулятора на управляющее устройство (например величина ШИМ или угол поворота серво)

    datatype getResult();      // возвращает новое значение при вызове (если используем свой таймер с периодом dt!)
    datatype getResultTimer(); // возвращает новое значение не ранее, чем через dt миллисекунд (встроенный таймер с периодом dt)
    void setDirection(boolean direction);    // направление регулирования: NORMAL (0) или REVERSE (1)
    void setMode(boolean mode);              // режим: работа по входной ошибке ON_ERROR (0) или по изменению ON_RATE (1)
    void setLimits(int min_output, int max_output);    // лимит выходной величины (например для ШИМ ставим 0-255)
    void setDt(int16_t new_dt);              // установка времени дискретизации (для getResultTimer)
    float Kp = 0.0;
    float Ki = 0.0;
    float Kd = 0.0;
}

class MyButton{
    byte _pin
    bool _flag = false
    uint32_t _tmr = millis
    MyButton(byte pin)
    MyButton()
    void ini(byte pin)
    bool click()
    bool pressed()
}

class MyThermoCouple{
    byte _sck, _so, _cs;
    uint8_t spiread(void);
    uint32_t _tmr = millis;
    MyThermoCouple();
    void ini(byte SCK, byte CS, byte SO);
    float readCelsius();
    float readFarenheit();
}
TRM--*LCD : создает
TRM --* PIDRegulator : Создает
TRM --* parametrs : используется для сохранения
TemperaturePauseCollector --* temperaturePausesStruct
TemperatureProgramm --* temperaturePausesStruct
PIDRegulator --* Koefficients : Создает из EEprom
PIDRegulator --* GyverPID : Создает для расчетов
TRM--*MyButton : Создает (up, down, number, start/stop, motor)
TRM--*MyThermoCouple : Создает
TRM--*TemperaturePauseCollector: Создает
TemperatureProgramm *--TemperaturePauseCollector:Создает каждый раз при работе с паузами
@enduml